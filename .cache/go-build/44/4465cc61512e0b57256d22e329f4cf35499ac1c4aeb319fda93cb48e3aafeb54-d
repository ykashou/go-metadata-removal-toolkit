//line /workspace/src/utils/fileutils.go:1:1
package utils

import (
	"crypto/sha256"
	"encoding/hex"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"time"
)

// GetFileHash returns the SHA-256 hash of a file
func GetFileHash(filePath string) (string, error) {goCover_88578f0c3c39__9[0] = 5 ; goCover_88578f0c3c39__9[1] = goCover_88578f0c3c39_P ; goCover_88578f0c3c39__9[2] = 9 ; goCover_88578f0c3c39__9[3] = 1;
	file, err := os.Open(filePath)
	if err != nil {goCover_88578f0c3c39__9[6] = 1;
		return "", err
	}
	goCover_88578f0c3c39__9[4] = 1;defer file.Close()

	hasher := sha256.New()
	if _, err := io.Copy(hasher, file); err != nil {goCover_88578f0c3c39__9[7] = 1;
		return "", err
	}

	goCover_88578f0c3c39__9[5] = 1;return hex.EncodeToString(hasher.Sum(nil)), nil
}

// GetFileSize returns the size of a file in bytes
func GetFileSize(filePath string) (int64, error) {goCover_88578f0c3c39__10[0] = 3 ; goCover_88578f0c3c39__10[1] = goCover_88578f0c3c39_P ; goCover_88578f0c3c39__10[2] = 10 ; goCover_88578f0c3c39__10[3] = 1;
	fileInfo, err := os.Stat(filePath)
	if err != nil {goCover_88578f0c3c39__10[5] = 1;
		return 0, err
	}
	goCover_88578f0c3c39__10[4] = 1;return fileInfo.Size(), nil
}

// GetFileModTime returns the modification time of a file
func GetFileModTime(filePath string) (time.Time, error) {goCover_88578f0c3c39__11[0] = 3 ; goCover_88578f0c3c39__11[1] = goCover_88578f0c3c39_P ; goCover_88578f0c3c39__11[2] = 11 ; goCover_88578f0c3c39__11[3] = 1;
	fileInfo, err := os.Stat(filePath)
	if err != nil {goCover_88578f0c3c39__11[5] = 1;
		return time.Time{}, err
	}
	goCover_88578f0c3c39__11[4] = 1;return fileInfo.ModTime(), nil
}

// CreateBackup creates a backup of a file
func CreateBackup(filePath string) (string, error) {goCover_88578f0c3c39__12[0] = 5 ; goCover_88578f0c3c39__12[1] = goCover_88578f0c3c39_P ; goCover_88578f0c3c39__12[2] = 12 ; goCover_88578f0c3c39__12[3] = 1;
	// Read original file
	data, err := os.ReadFile(filePath)
	if err != nil {goCover_88578f0c3c39__12[6] = 1;
		return "", err
	}

	// Create backup file name
	goCover_88578f0c3c39__12[4] = 1;backupPath := fmt.Sprintf("%s.bak.%s", filePath, time.Now().Format("20060102_150405"))

	// Write backup file
	err = os.WriteFile(backupPath, data, 0644)
	if err != nil {goCover_88578f0c3c39__12[7] = 1;
		return "", err
	}

	goCover_88578f0c3c39__12[5] = 1;return backupPath, nil
}

// IsDirectory checks if a path is a directory
func IsDirectory(path string) (bool, error) {goCover_88578f0c3c39__13[0] = 3 ; goCover_88578f0c3c39__13[1] = goCover_88578f0c3c39_P ; goCover_88578f0c3c39__13[2] = 13 ; goCover_88578f0c3c39__13[3] = 1;
	fileInfo, err := os.Stat(path)
	if err != nil {goCover_88578f0c3c39__13[5] = 1;
		return false, err
	}
	goCover_88578f0c3c39__13[4] = 1;return fileInfo.IsDir(), nil
}

// GetFileExtension returns the extension of a file
func GetFileExtension(filePath string) string {goCover_88578f0c3c39__14[0] = 1 ; goCover_88578f0c3c39__14[1] = goCover_88578f0c3c39_P ; goCover_88578f0c3c39__14[2] = 14 ; goCover_88578f0c3c39__14[3] = 1;
	return filepath.Ext(filePath)
}
