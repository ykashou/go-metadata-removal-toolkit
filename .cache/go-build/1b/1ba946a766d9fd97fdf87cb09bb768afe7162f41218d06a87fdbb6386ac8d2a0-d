//line /workspace/src/stats/stats.go:1:1
package stats

// File type constants
const (
	TypeImage    = "image"
	TypePDF      = "pdf"
	TypeDocument = "document"
	TypeUnknown  = "unknown"
)

// MetadataField represents a type of metadata found in files
type MetadataField struct {
	Name     string
	Count    int
	Examples []string // Store a few examples of metadata values (limited to prevent excessive memory usage)
}

// MetadataStats tracks statistics about metadata found in files
type MetadataStats struct {
	TotalFiles         int
	TotalMetadataFound int
	ByFileType         map[string]int            // Count of files by type
	ByMetadataType     map[string]*MetadataField // Statistics by metadata field type
	FileTypeMetadata   map[string]map[string]int // Count of metadata fields by file type
}

// NewMetadataStats creates a new stats tracker
func NewMetadataStats() *MetadataStats {goCover_cdaca605c1fa__0[0] = 1 ; goCover_cdaca605c1fa__0[1] = goCover_cdaca605c1fa_P ; goCover_cdaca605c1fa__0[2] = 0 ; goCover_cdaca605c1fa__0[3] = 1;
	return &MetadataStats{
		ByFileType:       make(map[string]int),
		ByMetadataType:   make(map[string]*MetadataField),
		FileTypeMetadata: make(map[string]map[string]int),
	}
}

// AddFile increments the counter for a specific file type
func (ms *MetadataStats) AddFile(fileType string) {goCover_cdaca605c1fa__1[0] = 2 ; goCover_cdaca605c1fa__1[1] = goCover_cdaca605c1fa_P ; goCover_cdaca605c1fa__1[2] = 1 ; goCover_cdaca605c1fa__1[3] = 1;
	ms.TotalFiles++
	ms.ByFileType[fileType]++

	// Initialize the inner map if it doesn't exist
	if _, ok := ms.FileTypeMetadata[fileType]; !ok {goCover_cdaca605c1fa__1[4] = 1;
		ms.FileTypeMetadata[fileType] = make(map[string]int)
	}
}

// AddMetadata tracks a metadata field found in a file
func (ms *MetadataStats) AddMetadata(fileType, fieldName, example string) {goCover_cdaca605c1fa__2[0] = 10 ; goCover_cdaca605c1fa__2[1] = goCover_cdaca605c1fa_P ; goCover_cdaca605c1fa__2[2] = 2 ; goCover_cdaca605c1fa__2[3] = 1;
	// Add to total count
	ms.TotalMetadataFound++

	// Track by metadata type
	if _, ok := ms.ByMetadataType[fieldName]; !ok {goCover_cdaca605c1fa__2[6] = 1;
		ms.ByMetadataType[fieldName] = &MetadataField{
			Name:     fieldName,
			Examples: make([]string, 0, 3), // Cap examples at 3
		}
	}

	goCover_cdaca605c1fa__2[4] = 1;ms.ByMetadataType[fieldName].Count++

	// Add example if we have space and it's not already in the list
	field := ms.ByMetadataType[fieldName]
	if len(example) > 0 && len(field.Examples) < 3 {goCover_cdaca605c1fa__2[7] = 1;
		// Check if example already exists
		exists := false
		for _, ex := range field.Examples {goCover_cdaca605c1fa__2[9] = 1;
			if ex == example {goCover_cdaca605c1fa__2[10] = 1;
				exists = true
				break
			}
		}

		goCover_cdaca605c1fa__2[8] = 1;if !exists {goCover_cdaca605c1fa__2[11] = 1;
			field.Examples = append(field.Examples, example)
		}
	}

	// Track by file type
	goCover_cdaca605c1fa__2[5] = 1;if _, ok := ms.FileTypeMetadata[fileType]; ok {goCover_cdaca605c1fa__2[12] = 1;
		ms.FileTypeMetadata[fileType][fieldName]++
	}
}

// MergeStats combines two MetadataStats objects
func (ms *MetadataStats) MergeStats(other *MetadataStats) {goCover_cdaca605c1fa__3[0] = 21 ; goCover_cdaca605c1fa__3[1] = goCover_cdaca605c1fa_P ; goCover_cdaca605c1fa__3[2] = 3 ; goCover_cdaca605c1fa__3[3] = 1;
	ms.TotalFiles += other.TotalFiles
	ms.TotalMetadataFound += other.TotalMetadataFound

	// Merge by file type
	for fileType, count := range other.ByFileType {goCover_cdaca605c1fa__3[6] = 1;
		ms.ByFileType[fileType] += count
	}

	// Merge by metadata type
	goCover_cdaca605c1fa__3[4] = 1;for fieldName, field := range other.ByMetadataType {goCover_cdaca605c1fa__3[7] = 1;
		if existing, ok := ms.ByMetadataType[fieldName]; ok {goCover_cdaca605c1fa__3[8] = 1;
			existing.Count += field.Count

			// Merge examples (keeping up to 3)
			for _, example := range field.Examples {goCover_cdaca605c1fa__3[9] = 1;
				if len(existing.Examples) < 3 {goCover_cdaca605c1fa__3[10] = 1;
					// Check if example already exists
					exists := false
					for _, ex := range existing.Examples {goCover_cdaca605c1fa__3[12] = 1;
						if ex == example {goCover_cdaca605c1fa__3[13] = 1;
							exists = true
							break
						}
					}

					goCover_cdaca605c1fa__3[11] = 1;if !exists {goCover_cdaca605c1fa__3[14] = 1;
						existing.Examples = append(existing.Examples, example)
					}
				}
			}
		} else{ goCover_cdaca605c1fa__3[15] = 1;{
			// Copy field data
			newField := &MetadataField{
				Name:     field.Name,
				Count:    field.Count,
				Examples: make([]string, 0, 3),
			}

			// Copy up to 3 examples
			for i, example := range field.Examples {goCover_cdaca605c1fa__3[17] = 1;
				if i < 3 {goCover_cdaca605c1fa__3[18] = 1;
					newField.Examples = append(newField.Examples, example)
				} else{ goCover_cdaca605c1fa__3[19] = 1;{
					break
				}}
			}

			goCover_cdaca605c1fa__3[16] = 1;ms.ByMetadataType[fieldName] = newField
		}}
	}

	// Merge by file type metadata
	goCover_cdaca605c1fa__3[5] = 1;for fileType, fields := range other.FileTypeMetadata {goCover_cdaca605c1fa__3[20] = 1;
		if _, ok := ms.FileTypeMetadata[fileType]; !ok {goCover_cdaca605c1fa__3[22] = 1;
			ms.FileTypeMetadata[fileType] = make(map[string]int)
		}

		goCover_cdaca605c1fa__3[21] = 1;for fieldName, count := range fields {goCover_cdaca605c1fa__3[23] = 1;
			ms.FileTypeMetadata[fileType][fieldName] += count
		}
	}
}
